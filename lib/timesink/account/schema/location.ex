defmodule Timesink.Accounts.Location do
  use Ecto.Schema
  import Ecto.Changeset

  # List of three-letter countries from ISO 3166
  # See: https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
  @iso3166_countries [
    :AFG,
    :ALA,
    :ALB,
    :DZA,
    :ASM,
    :AND,
    :AGO,
    :AIA,
    :ATA,
    :ATG,
    :ARG,
    :ARM,
    :ABW,
    :AUS,
    :AUT,
    :AZE,
    :BHS,
    :BHR,
    :BGD,
    :BRB,
    :BLR,
    :BEL,
    :BLZ,
    :BEN,
    :BMU,
    :BTN,
    :BOL,
    :BES,
    :BIH,
    :BWA,
    :BVT,
    :BRA,
    :IOT,
    :BRN,
    :BGR,
    :BFA,
    :BDI,
    :CPV,
    :KHM,
    :CMR,
    :CAN,
    :CYM,
    :CAF,
    :TCD,
    :CHL,
    :CHN,
    :CXR,
    :CCK,
    :COL,
    :COM,
    :COD,
    :COG,
    :COK,
    :CRI,
    :CIV,
    :HRV,
    :CUB,
    :CUW,
    :CYP,
    :CZE,
    :DNK,
    :DJI,
    :DMA,
    :DOM,
    :ECU,
    :EGY,
    :SLV,
    :GNQ,
    :ERI,
    :EST,
    :SWZ,
    :ETH,
    :FLK,
    :FRO,
    :FJI,
    :FIN,
    :FRA,
    :GUF,
    :PYF,
    :ATF,
    :GAB,
    :GMB,
    :GEO,
    :DEU,
    :GHA,
    :GIB,
    :GRC,
    :GRL,
    :GRD,
    :GLP,
    :GUM,
    :GTM,
    :GGY,
    :GIN,
    :GNB,
    :GUY,
    :HTI,
    :HMD,
    :VAT,
    :HND,
    :HKG,
    :HUN,
    :ISL,
    :IND,
    :IDN,
    :IRN,
    :IRQ,
    :IRL,
    :IMN,
    :ISR,
    :ITA,
    :JAM,
    :JPN,
    :JEY,
    :JOR,
    :KAZ,
    :KEN,
    :KIR,
    :PRK,
    :KOR,
    :KWT,
    :KGZ,
    :LAO,
    :LVA,
    :LBN,
    :LSO,
    :LBR,
    :LBY,
    :LIE,
    :LTU,
    :LUX,
    :MAC,
    :MDG,
    :MWI,
    :MYS,
    :MDV,
    :MLI,
    :MLT,
    :MHL,
    :MTQ,
    :MRT,
    :MUS,
    :MYT,
    :MEX,
    :FSM,
    :MDA,
    :MCO,
    :MNG,
    :MNE,
    :MSR,
    :MAR,
    :MOZ,
    :MMR,
    :NAM,
    :NRU,
    :NPL,
    :NLD,
    :NCL,
    :NZL,
    :NIC,
    :NER,
    :NGA,
    :NIU,
    :NFK,
    :MKD,
    :MNP,
    :NOR,
    :OMN,
    :PAK,
    :PLW,
    :PSE,
    :PAN,
    :PNG,
    :PRY,
    :PER,
    :PHL,
    :PCN,
    :POL,
    :PRT,
    :PRI,
    :QAT,
    :REU,
    :ROU,
    :RUS,
    :RWA,
    :BLM,
    :SHN,
    :KNA,
    :LCA,
    :MAF,
    :SPM,
    :VCT,
    :WSM,
    :SMR,
    :STP,
    :SAU,
    :SEN,
    :SRB,
    :SYC,
    :SLE,
    :SGP,
    :SXM,
    :SVK,
    :SVN,
    :SLB,
    :SOM,
    :ZAF,
    :SGS,
    :SSD,
    :ESP,
    :LKA,
    :SDN,
    :SUR,
    :SJM,
    :SWE,
    :CHE,
    :SYR,
    :TWN,
    :TJK,
    :TZA,
    :THA,
    :TLS,
    :TGO,
    :TKL,
    :TON,
    :TTO,
    :TUN,
    :TUR,
    :TKM,
    :TCA,
    :TUV,
    :UGA,
    :UKR,
    :ARE,
    :GBR,
    :UMI,
    :USA,
    :URY,
    :UZB,
    :VUT,
    :VEN,
    :VNM,
    :VGB,
    :VIR,
    :WLF,
    :ESH,
    :YEM,
    :ZMB,
    :ZWE
  ]

  def iso3166_countries, do: @iso3166_countries

  @type t :: %{
          __struct__: __MODULE__,
          locality: String.t(),
          country_code: atom(),
          country: String.t(),
          state_code: String.t(),
          label: String.t(),
          lat: float(),
          lng: float()
        }

  embedded_schema do
    field :locality, :string
    field :country_code, Ecto.Enum, values: @iso3166_countries
    field :state_code, :string
    field :lat, :float
    field :lng, :float
    field :country, :string
    field :label, :string
  end

  @required_fields ~w(locality country_code lat lng label)a

  def changeset(%{__struct__: __MODULE__} = struct, %{} = params) do
    struct
    |> cast(params, [:locality, :country_code, :country, :lat, :lng, :label, :state_code])
    |> validate_required(@required_fields)
    |> validate_number(:lat, greater_than_or_equal_to: -90, less_than_or_equal_to: 90)
    |> validate_number(:lng, greater_than_or_equal_to: -180, less_than_or_equal_to: 180)
  end
end
